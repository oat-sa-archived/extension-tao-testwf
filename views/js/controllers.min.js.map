{"version":3,"file":"routes.js","sources":["routes.js","authoring.js"],"names":["define","Authoring","actions","index","module","$","_","__","GenerisTreeSelectClass","helpers","feedback","Controller","start","options","self","this","$sequenceContainer","merge","config","sequence","newSequence","labels","_url","actionId","saveUrl","saveurl","paginate","saveCallback","data","uris","parseJSON","instances","attr","inArray","undefined","parseInt","replace","_buildItemList","checkedNodes","serverParameters","openNodes","rootNode","callback","checkPaginate","check","on","css","sortable","axis","opacity","placeholder","tolerance","update","listItems","i","length","click","toSend","uri","val","classUri","ajax","url","type","dataType","success","response","saved","complete","loaded","$container","items","itemId","html"],"mappings":"AAqBAA,OAAA,iCAAA,WAGA,OACAC,WACAC,SACAC,MAAA,4BCxBAH,OAAA,kCACA,SACA,SACA,SACA,OACA,sBACA,UACA,eACA,SAAAI,OAAAC,EAAAC,EAAAC,GAAAC,uBAAAC,QAAAC,UAMA,GAAAC,aAOAC,MAAA,SAAAC,SACA,GAAAC,MAAAC,KAEAC,mBAAAX,EAAA,iBAEAQ,SAAAP,EAAAW,MAAAb,OAAAc,SAAAL,YACA,IAAAM,UAAAN,QAAAM,aACAC,eACAC,OAAAR,QAAAQ,UAEA,IAAAb,wBAAA,aAAAC,QAAAa,KAAA,cAAA,QAAA,cACAC,SAAA,OACAC,QAAAX,QAAAY,QACAC,SAAA,GACAC,aAAA,SAAAC,MACAR,eACAD,WACA;GAAAU,MAAAxB,EAAAyB,UAAAF,KAAAG,UACA,KAAA,GAAAC,QAAAH,MACA,KAAAxB,EAAA4B,QAAAJ,KAAAG,MAAAb,WAAAe,SAAAF,OACAZ,YAAAe,SAAAH,KAAAI,QAAA,YAAA,KAAA,GAAA,QAAAP,KAAAG,MACAb,SAAAgB,SAAAH,KAAAI,QAAA,YAAA,KAAA,GAAAP,KAAAG,MAGAlB,MAAAuB,eAAArB,mBAAAI,YAAAC,SAEAiB,aAAAnB,SACAoB,kBACAC,UAAA3B,QAAA2B,UACAC,SAAA5B,QAAA4B,UAEAC,UACAC,cAAA,WAEA5B,KAAA6B,MAAAzB,cAMAH,mBACA6B,GAAA,YAAA,KAAA,WACAxC,EAAAU,MAAA+B,IAAA,SAAA,UAEAD,GAAA,YAAA,KAAA,WACAxC,EAAAU,MAAA+B,IAAA,SAAA,cAEAD,GAAA,UAAA,KAAA,WACAxC,EAAAU,MAAA+B,IAAA,SAAA;GAGA9B,mBAAA+B,UACAC,KAAA,IACAC,QAAA,GACAC,YAAA,cACAC,UAAA,UACAC,OAAA,WACA,GAAAjD,OACAkD,UAAAhD,EAAAU,MAAAgC,SAAA,UAEA3B,gBACAD,WACA,KAAA,GAAAmC,GAAA,EAAAA,EAAAD,UAAAE,OAAAD,IACAnD,MAAAmD,EAAA,EACAlC,YAAAjB,OAAAkD,UAAAC,GACAnC,SAAAhB,OAAAkD,UAAAC,GAAAlB,QAAA,QAAA,GAEAtB,MAAAuB,eAAArB,mBAAAI,YAAAC,WAIAhB,EAAA,8BAAAmD,MAAA,WACA,GAAAC,UACA,KAAA,GAAAtD,SAAAgB,UACAsC,OAAA,YAAAtD,OAAAgB,SAAAhB,MAGAsD,QAAAC,IAAArD,EAAA,mBAAAsD,MACAF,OAAAG,SAAAvD,EAAA,wBAAAsD,MAEAtD,EAAAwD,MACAC,IAAAjD,QAAAY,QACAsC,KAAA,OACAnC,KAAA6B,OACAO,SAAA,OACAC,QAAA,SAAAC,UACAA,SAAAC,OACAzD,WAAAuD,QAAA1D,GAAA;EAGA6D,SAAA,WACA3D,QAAA4D,eAMAhC,eAAA,SAAAiC,WAAAC,MAAAlD,QACA,GACAmD,QADAC,KAAA,EAEA,KAAA,GAAAnB,KAAAiB,OACAC,OAAAD,MAAAjB,GACAmB,MAAA,oCAAAD,OAAA,MACAC,MAAAnB,EAAA,KAAAjC,OAAAmD,QACAC,MAAA,OAEAH,YAAAG,KAAAA,OAIA,OAAA9D","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n * \n * \n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoWfTest/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Authoring' : {\n            'actions' : {\n                'index' : 'controller/authoring'\n            }\n        }\n    };\n});\n\n","/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoWfTest/controller/authoring',[\n    'module', \n    'jquery', \n    'lodash', \n    'i18n', \n    'generis.tree.select', \n    'helpers', \n    'ui/feedback'\n],  function(module, $, _, __, GenerisTreeSelectClass, helpers, feedback) {\n    \n    /**\n     * Wf test authoring controller\n     * @exports taoWfTest/controller/authoring\n     */\n    var Controller = {\n        \n         /**\n          * Start the controller, main entry method.\n          * @public \n          * @param {Object} options\n          */\n         start : function(options){\n            var self = this;\n\n            var $sequenceContainer = $('#item-sequence');\n\n            options = _.merge(module.config(), options || {});\n            var sequence = options.sequence || [];\n            var newSequence = {};\n            var labels = options.labels || {};\n\n            new GenerisTreeSelectClass('#item-tree', helpers._url('getTreeData', 'Items', 'taoWfTest'),{\n                actionId: 'item',\n                saveUrl: options.saveurl,\n                paginate:\t10,\n                saveCallback: function (data){\n                    newSequence = {};\n                    sequence = [];\n                    var uris = $.parseJSON(data.instances);\n                    for (var attr in uris) {\n                        if ($.inArray(uris[attr], sequence) === -1 && attr !== undefined) {\n                            newSequence[parseInt(attr.replace('instance_', ''))+1] = 'item_'+ uris[attr];\n                            sequence[parseInt(attr.replace('instance_', ''))+1] =  uris[attr];\n                        }\n                    }\n                    self._buildItemList($sequenceContainer, newSequence, labels);\n                },\n                checkedNodes : sequence,\n                serverParameters: {\n                    openNodes: options.openNodes,\n                    rootNode:  options.rootNode\n                },\n                callback: {\n                    checkPaginate: function(NODE, TREE_OBJ) {\n                        //Check the unchecked that must be checked... ol√®!\n                        this.check(sequence);\n                    }\n                }\n            });\n\n            //TODO use propert css classes            \n            $sequenceContainer\n              .on('mouseover', 'li', function(){\n                $(this).css('cursor', 'grab');\n            })\n              .on('mousedown', 'li', function(){\n                $(this).css('cursor', 'grabbing');\n            })\n              .on('mouseup', 'li', function(){\n                $(this).css('cursor', 'pointer');\n            });\n\n            $sequenceContainer.sortable({\n                axis: 'y',\n                opacity: 0.6,\n                placeholder: 'placeholder',\n                tolerance: 'pointer',\n                update: function(event, ui){\n                    var index;\n                    var listItems = $(this).sortable('toArray');\n\n                    newSequence = {};\n                    sequence = [];\n                    for (var i = 0; i < listItems.length; i++) {\n                            index = i+1;\n                            newSequence[index] = listItems[i];\n                            sequence[index] = listItems[i].replace('item_', '');\n                    }\n                    self._buildItemList($sequenceContainer, newSequence, labels);\n                }\n            });\n\n            $(\".sequence-container .saver\").click(function(){\n                var toSend = {};\n                for(var index in sequence){\n                    toSend['instance_'+index] = sequence[index];\n                }\n\n                toSend.uri = $(\"input[name=uri]\").val();\n                toSend.classUri = $(\"input[name=classUri]\").val();\n\n                $.ajax({\n                    url: options.saveurl,\n                    type: \"POST\",\n                    data: toSend,\n                    dataType: 'json',\n                    success: function(response){\n                            if (response.saved) {\n                                feedback().success(__('Sequence saved successfully'));\n                            }\n                    },\n                    complete: function(){\n                        helpers.loaded();\n                    }\n                });\n            });\n        },\n\n        _buildItemList : function ($container, items, labels){\n            var html = '';\n            var itemId;\n            for (var i in items) {\n                itemId = items[i];\n                html += \"<li class='ui-state-default' id='\" + itemId + \"' >\";\n                html += i + \". \" + labels[itemId];\n                html += \"</li>\";\n            }\n            $container.html(html);\n        }\n    };\n\n    return Controller;\n});\n\n"]}